1.
   Транспорт отправляет данные через метод
          var dataExchangeSuccess = await _transport.DataExchangeAsync(timeRespone, _dataProvider, ct);

		  Единица отправялемых данных находится внутри провайдера (_dataProvider содержит в себе InDataWrapper<TInput>).
		  Эти данные нужно отправить на ус-во, но как отправить определяет провайдер,
		  например для HTTP можно сразу оправить весь List<AdInput>, а для более медленног трансопорт нужно отправлять БАЧАМИ 
		  Например для SP отправлять по 3 строки (batchSize= 3) 
		  Единица обмена: 3 записи -> byte[] -> request -> ...timeout... -> respawn -> byne[] -> сохранить
		  (т.е. 3 записям соответсвует ответ, коллекцию таких пар мы сохраняем и отдаем как результат функции DataExchangeAsync)

		 while(!provider.AllDataSending)
		 {
		    try
            {
                byte[] writeBuffer = dataProvider.GetDataByte(); //!!! Выдает данные в нужном формате порциями (batchSize).
                if (writeBuffer != null && writeBuffer.Any())
                {
                    StatusDataExchange = StatusDataExchange.Process;
                    var readBuff = await RequestAndRespawnInstantlyAsync(writeBuffer, dataProvider.CountSetDataByte, timeRespoune, ct);
                    dataProvider.SetDataByte(readBuff);         // !!! внури провайдера анализируется полученный ответ на отправку одной порции и сохраняется.
                }
            }
            catch (OperationCanceledException)
            {
                StatusDataExchange = StatusDataExchange.EndWithCanceled;
                return StatusDataExchange.EndWithCanceled;
            }
            catch (TimeoutException)
            {
                //ReOpen();
                StatusDataExchange = StatusDataExchange.EndWithTimeout;
                return StatusDataExchange.EndWithTimeout;
            }
		 }